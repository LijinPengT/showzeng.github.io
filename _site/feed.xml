<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2016-11-12T18:58:46+08:00</updated><id>http://localhost:4000//</id><entry><title type="html">(译)打造完美像素图标</title><link href="http://localhost:4000/design/2016/10/22/make-pixel-perfect-icon.html" rel="alternate" type="text/html" title="(译)打造完美像素图标" /><published>2016-10-22T14:26:29+08:00</published><updated>2016-10-22T14:26:29+08:00</updated><id>http://localhost:4000/design/2016/10/22/make-pixel-perfect-icon</id><content type="html" xml:base="http://localhost:4000/design/2016/10/22/make-pixel-perfect-icon.html">&lt;blockquote&gt;
  &lt;p&gt;本文为译文，原文链接： &lt;a href=&quot;https://blog.ginetta.net/i-set-out-to-create-pixel-perfect-icons-heres-what-i-discovered-along-the-way-4e46378932df#.83n2lylog&quot;&gt;点击进入原文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你也可以在众成翻译上找到 &lt;a href=&quot;http://zcfy.cc/article/i-set-out-to-create-pixel-perfect-icons-here-s-what-i-discovered-along-the-way-1483.html&quot;&gt;这篇文章&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;文章来源：itsCoder 的 &lt;a href=&quot;https://github.com/itsCoder/weeklyblog&quot;&gt;WeeklyBolg&lt;/a&gt; 项目&lt;/li&gt;
    &lt;li&gt;itsCoder主页：&lt;a href=&quot;http://itscoder.com/&quot;&gt;http://itscoder.com/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;作者：&lt;a href=&quot;https://github.com/showzeng&quot;&gt;showzeng&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;审阅者：&lt;a href=&quot;https://github.com/ZetaoYang&quot;&gt;Zetaoyang&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;我开始制作完美像素图标。以下是一路探索所得。&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;有些设计师对这种深入到像素的制作并不足够重视，其他人会认为它会魔性地从天而降，而只有极少数人接受这个挑战并切实地去创作。我个人深信不疑，图标是一个好的设计的非常重要的一环，因此，每个设计师都应该能够设计出一套图标系统，只要有热情、耐心和一些指导。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;http://www.ginetta.net/&quot;&gt;Ginetta&lt;/a&gt; 作为一个设计师，这一路上，我一直在寻找一篇能够教我如何进行图标设计，从文件配置到图标字体的完整的文章。我浏览过很多优秀的文章，全部都是不同的来源。就在某一时刻，我决定将所有这些信息收集起来并完善整理为一份指南，以此来帮助和鼓励设计师们开始去绘制出自己的完美像素图标。&lt;/p&gt;

&lt;p&gt;这篇指南被分成五个部分，分别包括：配置文件、提示&amp;amp;奇淫技巧、图标网格、导出图标和创作图标字体。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;第一部分：配置文件&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;开始你图标设计之旅的第一步就是正确合适地配置好你的文件。这有助你于一开始就精确而有序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/icon-tools.png&quot; alt=&quot;From left to right: Illustrator, Sketch and Affinity Designer.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;绘制你的图标，会有不同的软件可供选择。最著名的几个当属 Adobe Illustrator、Sketch 和 Affinity Designer 了。我更偏爱于 AI，因为它提供了最简单有效的很多绘制工具（画笔工具、路径查找器、…），而这些都是在我绘制图标时对我最为重要的。&lt;a href=&quot;http://iconutopia.com/interview-scott-lewis-iconfinder/&quot;&gt;Scott Lewis&lt;/a&gt;，开发者 &amp;amp; Iconfinder 的内容负责人，曾在他的文章中比较过这三种软件。&lt;a href=&quot;Sketch 或者 Affinity designer 能够取代 Adobe Illustrator 吗？&quot;&gt;Can Sketch or Affinity designer replace Adobe Illustrator?&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我承认在多年的使用中会有偏见，但是用 Illustrator 的画笔工具绘制的感觉就像是在使用机械笔一样，而使用 Sketch 和 Affinity 的画笔工具的感觉则是像使用粉笔绘制一样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我完全同意他的观点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建新的文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在创建一个实例文件之前的第一件事就是要去定义一些关键的元素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;画板尺寸，宽度和高度应为偶数（不能用小数！）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查选项，将新的对象对齐到像素网格中，每次你新建一个图标，你绘制的对象将自动对齐到最近的像素。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果你已经知道了你需要绘制几个图标，那么你也可以定义好画板数，间距和列。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你的高级设置应该会和下面的截图看起来相似。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/advanced-setting.png&quot; alt=&quot;Creating a new document pop-up window.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;通用配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在新建完一个文件后，会有一些小的调整需要设置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;打开 Illustrator 的 Edit（编辑） &amp;gt; Preferences（首选项） &amp;gt; General（常规） (或者按 Cmd + k 快捷键)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 General（常规）选项中，将键盘增量设为 1 px。这样，当你移动你的图标时，它们将留在像素网格中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/General-setting.png&quot; alt=&quot;General settings pop-up window&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;转到 Units（单位）选项卡，将 General（常规）和 Stroke（描边值）设为 Pixels（像素）。如果你愿意，你也可以将字体设为像素（这貌似非常没有必要，除非你真的打算在你的图标中使用字体）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/units-setting.png&quot; alt=&quot;Preferences pop-up window&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;第二部分：提示和技巧&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;现在你已经成功地创建了你的文件，是时候去浏览一些便捷的提示和技巧了。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;&lt;strong&gt;提示&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;提示 1：使用整数尺寸&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每当输入一个数字，请确保你是手动键入的，并且时刻谨记一定要使用整数，一定要使用整数（重要的事说三遍。。。不要用小数！）。为了确保你使用的是整数，尽量使用一些对象工具（椭圆，矩形等），而不是自己手工绘制。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示 2：所有的数字必须是偶数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用偶数是至为重要的，因为图标通常总是需要被调整大小。例如，假设你又一个 64 x 64 的图标，而你要将其调整为 32 x 32（一半），你仍将得到一个偶数而不是一个奇数或者是更糟糕的小数。因此，就不会有模糊不清的图标了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示 3：时刻保持你的变换框为打开状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转换框（ Window（窗口） &amp;gt; Transform（变换）或者使用 shift + F8 快捷键）可以帮助你追踪那些意外的小数值。如果有，你可以立即输入最为接近的整数值来修正它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/transform-box.png&quot; alt=&quot;Screenshot of how your transform box should look like&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;&lt;strong&gt;技巧&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;技巧 1：开启像素预览&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时，开启像素预览会很有帮助（在 View（视图） &amp;gt; Pixel Preview（像素预览）或使用 alt + cmd + y 快捷键开启设置）。这个预览模式会向你展示你图标的光栅图像，并且这将帮助你发现任何丢失的半个像素。这就是在你保存文件为 PNG 或者其它栅格格式之后所得到的图像。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技巧 2：相信你的眼睛而不是数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在设计你的图标时，确保你时不时地将他们视为一组，一起显示在一块画板上。这有助于你找到那种平衡。或许他们是不一样的尺寸和形状，但最终他们会看起来好像就本该属于一起。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技巧 3：使用标准的尺寸&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你的用户未要求特殊的尺寸，那就稳一点并使用标准的尺寸（例如：16 x 16, 48 x 48, 64 x 64, 92 x 92, 等）。如果你是为一些特殊的平台制作图标，像 Android 或者 IOS，查看其各自对应的指南（比如 Google 所推行的 Material Design）并遵循其标准的尺寸。这与一致性和缩放比例是相关的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技巧 4：从最大的尺寸开始设计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当你设计图标时，我个人建议你从最大的尺寸开始设计，然后再缩小到其它尺寸。从大尺寸开始会给你更多的空间来绘制你的图标与你所想要的复杂度。接着你就可以缩放它，也可以根据你需求来调整和简化图标使其最为合适。在更大的图标里的一些细节到了小的图标就可能要简化了。&lt;/p&gt;

&lt;p&gt;如果你在寻求一些灵感，可以到这些图标库里逛逛，比如 &lt;a href=&quot;https://thenounproject.com/&quot;&gt;The noun project&lt;/a&gt;, &lt;a href=&quot;http://www.uiparade.com/skill-type/icons/&quot;&gt;UI Parade&lt;/a&gt;, &lt;a href=&quot;http://www.flaticon.com/&quot;&gt;Flat Icon&lt;/a&gt;, &lt;a href=&quot;https://www.iconfinder.com/&quot;&gt;Iconfinder&lt;/a&gt; 和 &lt;a href=&quot;https://icons8.com/&quot;&gt;Icons8&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;&lt;strong&gt;第三部分：图标网格&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;当我第一次开始制作图标时，我天真地以为在我还未尝试着画出任何一个图标之前我就需要一个网格。在一番挣扎和尝试过各种不同的方法后，我意识到对于你的第一个图标集真的不需要一个网格。事实上，在你考虑创建一个网格之前，你需要制作大量的图标以便于你能够真正理解和明白创建一个网格所需要考虑到的因素。&lt;/p&gt;

&lt;p&gt;也就是说，当你绘制图标时使用网格系统通常来说是一个好的实践，因此，下面我将会解释什么是图标网格，什么时候使用图标网格以及怎么使用图标网格。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;&lt;strong&gt;什么是图标网格&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;图标网格是一组规则，它定义了你构建的图标集的结构。这有助于保持你图标集的一致性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/ios9-icon-grid.png&quot; alt=&quot;IOS 9 icon grid&quot; /&gt;
参见 &lt;a href=&quot;https://designcode.io/iosdesign-guidelines&quot;&gt;IOS 9 设计指南&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;&lt;strong&gt;何时又如何使用图标网格？&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;当你可以应用网格系统时，这里有一些主要的应用实例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;你越是需要创造出更多风格一致的图标，参考指南就越是应该获得一个有凝聚力的集合以使其更为坚固。所以，如果你要制作一个大的图标集（50+），那就先画它几个图标（一个小样本），然后再决定图标网格的规则，并在之后的图标中都要坚守下去。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当为具有图标网格的现有平台（IOS ，Android，等）创建图标时，遵守其网格规范，以使你的图标能够和平台剩余部分保持一致。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定义指导规范是相当重要的，如果你知道将来会有其他人来接手这些图标。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;所有伟大的图标集都有一个网格，但所有最糟的图标集也完全遵守于网格。 —— Justas，Icon Utopia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;规则：永远不要向你图标信息的清晰度妥协仅仅是因为它刚好适应了网格，因为你的网格不会适合每个图标&lt;/strong&gt;。如果一个图标不合适，就失去了其意义，或只是看起来丑死了，那么请不要害怕把网格给关掉。&lt;/p&gt;

&lt;p&gt;如果你需要一些关于网格上的帮助，你可以看看这篇文章：&lt;a href=&quot;http://iconutopia.com/icon-grid-when-and-how-to-use-it-bonus-grids/&quot;&gt;Icon Grid: When And How To Use It?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;&lt;strong&gt;第四部分：导出图标&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在完成你的图标制作的下一步就是导出这些图标，这样你就可以在你的网站或者应用上使用它们。这涉及到两个关键步骤，准备和保存文件。&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;&lt;strong&gt;准备&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在导出你的图标之前，&lt;strong&gt;请务必确保在每个图标周围绘制边框，透明且与你的画板保持相同尺寸&lt;/strong&gt;。这将允许图标之间具有相同的距离，而不管它们的大小。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;不要直接从 Illustrator 将图标复制到 Photoshop 上&lt;/strong&gt;。它们总是会因此变的模糊不清。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确保你的图标在它们各自本该在的画板上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择你的画板（快捷键 shift + O），分别进入每个画板，并根据里面的图标去重命名它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/icon-before-export.png&quot; alt=&quot;Screenshot of how your icons should look like before you export them.&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;&lt;strong&gt;保存&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;找到 File（文件）&amp;gt; Save As（存储为，快捷键：cmd + shift + s），然后为你的图标输入一个简洁而有意义的名字。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择文件类型为 SVG 并选中 Use Artboards（使用画板）选项，这将会导出所有的图标。如果你想导出指定的图标，选中 Range（范围）选项，然后输入需要导出的画板编号。为什么选择 SVG 格式？为什么不是 EPS 格式？因为 SVG 是用于 Web 排版的格式，而至于 EPS 则是用于打印的发布环境。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择你想保存图标的路径然后点击保存按钮。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后，每个图标的文件名里都会有一个烦人的 “1-”。要删除它，右键单击这些图标，然后选择重命名所有，把 “1-” 替换为空字段。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/export-icon.png&quot; alt=&quot;Screenshot of how your saving settings should look like before you export your icons.&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;&lt;strong&gt;优化&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;不幸的是 Illustrator（甚至是 Sketch）在 web 上对图标的优化不是很友好。在你导出图标后，如果你用一些文本编辑器（如 Sublime 或者是 Atom）打开它们，你会注意到这些图标显示的代码会相当混乱。&lt;/p&gt;

&lt;p&gt;这个在线工具 &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;svgomg&lt;/a&gt; 可以帮助你整理你的代码。只要拖动图标到上面并再次下载就可以了！你可以很直观的感受到它简化图标的代码是有多快，同时也将其文件大小减少至少 50%！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/optimization-icon.png&quot; alt=&quot;Icon code before(left) and after(right) optimization.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何生成所有尺寸的 PNG？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时候 SVG 格式将不会是正确的格式 —— 比如当你为本机移动端应用创作图标集时。在这种情况下，你可能需要导出 PNG。到 &lt;a href=&quot;https://iconverticons.com/online/&quot;&gt;Iconverticons&lt;/a&gt; 这个网站，拖放你的 SVG 图标，et voilà(哦，是的)！该应用会将它们转化为几乎是每一个可能的 PNG 分辨率图标。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;&lt;strong&gt;第五部分：制作一个图标字体&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;图标字体非常适合 Sketch，HTML 和其他工具中的设计原型。关于在开发网站时使用图标字体这一话题已经产生了&lt;a href=&quot;https://www.sitepoint.com/icon-fonts-vs-svg-debate/&quot;&gt;热烈的讨论&lt;/a&gt; —— 目前 SVG 仍然是最好的选择。Github 上最近也写了关于&lt;a href=&quot;https://github.com/blog/2112-delivering-octicons-with-svg&quot;&gt;这方面的东西&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里有几个用来制作图标字体的选项，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://icomoon.io/&quot;&gt;IcoMoon&lt;/a&gt; —— 一个 web 应用，用来制作，编辑和分享图标字体。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/nfroidure/gulp-iconfont&quot;&gt;Gulp Icon Font&lt;/a&gt; —— 一个命令行工具，可以从 SVG 图标的文件夹中生成字体。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://glyphsapp.com/&quot;&gt;Glyphs&lt;/a&gt; —— 一个在 Mac 上的专业字体设计工具。它有一个更便宜的版本和生成图标字体所需的所有功能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这篇文章中，我们已经决定专注于第一个选项 —— IcoMoon。&lt;/p&gt;

&lt;h4 id=&quot;icomoon-&quot;&gt;&lt;strong&gt;如何使用 IcoMoon 制作图标字体&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;IcoMoon 是一个 web 应用，你无需用户账号也可以使用它。但是缺点就是，你制作的所有东西都将存储在你的浏览器中，除非你手动清除缓存。所以我建议你还是创建一个账号。&lt;/p&gt;

&lt;p&gt;在创建完账号后，还有几个步骤你需要跟着做，以便让你的图标字体准备好。好啦，让我们开始做吧！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;编辑和准备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你第一件需要做的事就是创建一个新的工程。在那之后，你需要导入你的图标，但在开始之前，还有几件事是你需要了解的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;确保你所有的笔画和任何文本都转换为轮廓（快捷键是 shift + cmd + O）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你的图标资源应该要有相同的边框尺寸。IcoMoon 会自动检测图标的尺寸并且把图标对齐到基本网格，该网格应与你设计时的网格尺寸相匹配。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当所有图标都已导入进去，你就可以使用顶部的工具栏去编辑或者移除它们了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/toolbar-before-generate-iconfont.png&quot; alt=&quot;Toolbar of IcoMoon before you generate your iconfont.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在编辑图标时，你可以加上一些标签以便可以在 IcoMon 或者 一个 HTML 图标浏览器中去搜索图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/edit-icon.png&quot; alt=&quot;Edit mode of an icon.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在生成字体时，你会在生成面板中看到所有选中的图标带有各自的标签，名称和连字。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/display-of-generate-icon.png&quot; alt=&quot;Display of generated icons.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确保你的连字选项卡是开着的，因为它们是使用图标字体最快的方式，并允许你输入 “edit” 或 “account_circle” 来自动替换相应的图标（字形）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/toolbar-after-generate-iconfont.png&quot; alt=&quot;Toolbar of IcoMoon after you generate your iconfont.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下载&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在下载完图标字体之后，你会在下载文件夹下发现几个不同的文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/example-of-download-folder.png&quot; alt=&quot;Example of a downloaded folder.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fonts/&lt;/code&gt;，包含其他格式的字体以在不同的 web 浏览器上使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fonts/[Font Name].ttf&lt;/code&gt;，字体安装文件，以便在电脑中使用字体。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;demo.html&lt;/code&gt;，代表你的字体在网站上的显示效果的演示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;selection.json&lt;/code&gt;，和你需要元数据（例如字体浏览器）或者重新导入字体到 IcoMoon 时相关联。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style.css&lt;/code&gt;，在网站上使用字体时的渲染文件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在，你已经可以开始制作你自己的完美像素图标和生成你自己的图标字体了。如果你遵循这些建议，慢慢地耐心练习，我相信你很快就会创作出像专业级别的图标！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;受到鼓舞了吗？学习更多有关图标世界的东西。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你愿意深入一探图标设计的世界，这里有一些很有价值的文章。其中让我最为鼓舞的一篇是 &lt;a href=&quot;http://iconutopia.com/how-to-design-pixel-perfect-icons/&quot;&gt;How To Master Pixel Perfect Icons.&lt;/a&gt;，其它相关的文章有：&lt;a href=&quot;https://design.tutsplus.com/articles/7-principles-of-effective-icon-design--psd-147&quot;&gt;7 Principles of Effective Icon Design&lt;/a&gt;，&lt;a href=&quot;http://www.creativebloq.com/graphic-design/how-design-top-quality-icon-10135092&quot;&gt;How to design a top-quality icon&lt;/a&gt;，&lt;a href=&quot;https://design.tutsplus.com/tutorials/comparing-the-two-methods-for-creating-line-icons-offset-paths-vs-strokes--cms-25134&quot;&gt;Comparing the Two Methods for Creating Line Icons: Offset Paths vs. Strokes&lt;/a&gt;，&lt;a href=&quot;http://iconutopia.com/proper-way-of-creating-outline-icons/&quot;&gt;The proper way of creating outline icons&lt;/a&gt; 和 &lt;a href=&quot;http://iconhandbook.co.uk/&quot;&gt;Icon Handbook&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后，我要感谢我的同事 Jessica Goodson，Tibor Kranjc 和 Florian Schulz 帮助我完成此篇。&lt;/p&gt;

&lt;p&gt;享受其中吧！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;译者注：参考文档&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是 Pixelperfect?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;PixelPerfect (完美像素) 指的是一个 UI 素材本身的像素对应屏幕上一个像素的情况，这种情况下 UI 素材映射到屏幕上时没有任何拉伸和压缩，这种情况下 UI 显示效果非常清晰完美。 —— &lt;a href=&quot;http://blog.sina.cn/dpool/blog/s/blog_4148e8630102vji9.html?vt=4&quot;&gt;深入理解 Canvas Scaler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://iconutopia.com/interview-scott-lewis-iconfinder/&quot;&gt;Interview: Scott Lewis – Iconfinder&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://tu.sioe.cn/illustrator/6407.html&quot;&gt;Adobe Illustrator 菜单项中英对照释义&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://webzhao.me/ligatures.html&quot;&gt;连字（Ligature）那些事儿&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><category term="Design" /><summary type="html">我开始制作完美像素图标。以下是一路探索所得。</summary></entry><entry><title type="html">使用 Nginx 部署静态页面</title><link href="http://localhost:4000/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily.html" rel="alternate" type="text/html" title="使用 Nginx 部署静态页面" /><published>2016-10-03T15:53:55+08:00</published><updated>2016-10-03T15:53:55+08:00</updated><id>http://localhost:4000/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily</id><content type="html" xml:base="http://localhost:4000/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily.html">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;文章来源：itsCoder 的 &lt;a href=&quot;https://github.com/itsCoder/weeklyblog&quot;&gt;WeeklyBolg&lt;/a&gt; 项目&lt;/li&gt;
    &lt;li&gt;itsCoder主页：&lt;a href=&quot;http://itscoder.com/&quot;&gt;http://itscoder.com/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;作者：&lt;a href=&quot;https://github.com/showzeng&quot;&gt;showzeng&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;审阅者：&lt;a href=&quot;https://github.com/xcc3641&quot;&gt;谢三弟&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;nginx-&quot;&gt;&lt;strong&gt;Nginx 介绍&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器, Nginx，它的发音为 “ engine X ”，是一个高性能的 HTTP 和反向代理服务器，同时也是一个 IMAP/ POP3/ SMTP 代理服务器。Nginx 是由俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，它已经在该站点运行超过两年半了。Igor Sysoev 在建立的项目时,使用基于 BSD 许可。&lt;/p&gt;

&lt;p&gt;英文主页：&lt;a href=&quot;http://nginx.net&quot;&gt;http://nginx.net&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Nginx 作为 HTTP 服务器，有以下几项基本特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;处理静态文件，索引文件以及自动索引；打开文件描述符缓冲。&lt;/li&gt;
  &lt;li&gt;无缓存的反向代理加速，简单的负载均衡和容错。&lt;/li&gt;
  &lt;li&gt;FastCGI，简单的负载均衡和容错。&lt;/li&gt;
  &lt;li&gt;模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 Fast CGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。&lt;/li&gt;
  &lt;li&gt;支持 SSL 和 TLSSNI。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即 Nginx 的优点：轻量、高性能、并发能力强。用来部署静态页面也是相当便捷。&lt;/p&gt;

&lt;p&gt;这种高性能得益于 Nginx 的框架。在 Nginx 启动后，会有一个 master 进程和多个 worker 进程。master 进程主要用来管理 worker 进程，包含：接收来自外界的信号，向各 worker 进程发送信号，监控 worker 进程的运行状态，当 worker 进程退出后(异常情况下)，会自动重新启动新的 worker 进程。而基本的网络事件，则是放在 worker 进程中来处理的。多个 worker 进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个 worker 进程中处理，一个 worker 进程，不可能处理其它进程的请求。worker 进程的个数是可以设置的，一般我们会设置与机器 cpu 核数一致，这与 Nginx 的进程模型以及事件处理模型有关。&lt;/p&gt;

&lt;h4 id=&quot;nginx&quot;&gt;&lt;strong&gt;为何选用 Nginx&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;说到 Nginx，可能第一反应就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;反向代理&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;负载均衡&lt;/code&gt; 了。那么什么是 &lt;code class=&quot;highlighter-rouge&quot;&gt;反向代理&lt;/code&gt;，什么又是 &lt;code class=&quot;highlighter-rouge&quot;&gt;负载均衡&lt;/code&gt; 呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;反向代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先了解一下什么是 &lt;code class=&quot;highlighter-rouge&quot;&gt;前向代理&lt;/code&gt; 。代理 (Proxy) 也称网络代理，是一种特殊的网络服务，通俗来讲，就是在客户端和目标服务器之间的充当中间人，接收客户端的请求，再根据客户端请求向目标服务器发起相应的请求，从目标服务器获得指定资源后返回给客户端。且代理服务器可以对目标服务器的资源下载至本地缓存，如果客户端所要获取的资源在代理服务器的缓存之中，则代理服务器并不会再向目标服务器发起请求，而是直接返回缓存的资源。&lt;/p&gt;

&lt;p&gt;其实代理服务器非常常见，就比如因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;GWF&lt;/code&gt; 而存在的一些科学上网的代理商，就是利用国外服务器作为代理服务器，从而正确解析域名来实现科学上网。代理服务器也可以实现隐藏真实 IP，比如著名的 Tor （洋葱路由器）就是通过多重代理和一些加密技术来实现匿名交流。&lt;/p&gt;

&lt;p&gt;而 &lt;code class=&quot;highlighter-rouge&quot;&gt;反向代理&lt;/code&gt; 则是在服务器端作为代理使用，而不是客户端。也就是说，&lt;code class=&quot;highlighter-rouge&quot;&gt;前向代理&lt;/code&gt; 是代理内部网络用户访问 Internet 上服务器的连接请求，&lt;code class=&quot;highlighter-rouge&quot;&gt;反向代理&lt;/code&gt; 是以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时的代理服务器对外就表现为一个服务器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;反向代理负载均衡技术是把将来自 Internet 上的连接请求以反向代理的方式动态地转发给内部网络上的多台服务器进行处理，从而达到负载均衡的目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;真巧， Nginx 都做到了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nginx 作为一个优秀的代理服务器，反向代理和负载均衡必然是都具备的。想要更详细得了解这方面的知识和使用方法，可参见文末给出的参考资料： Nginx 入门指南。&lt;/p&gt;

&lt;h4 id=&quot;nginx--1&quot;&gt;&lt;strong&gt;Nginx 安装&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;本人使用的是腾讯云的服务器，版本为：  Ubuntu Server 14.04.1 LTS 32 位。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mac OS 系统参考这篇文章：&lt;a href=&quot;http://learnaholic.me/2012/10/10/installing-nginx-in-mac-os-x-mountain-lion/&quot;&gt;Installing Nginx in Mac OS X&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;nginx--2&quot;&gt;&lt;strong&gt;Nginx 配置&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;简单地配置 Nginx 的配置文件，以便在启动 Nginx 时去启用这些配置。而本文的重点也是于此。&lt;/p&gt;

&lt;p&gt;Nginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，一般地，我们只需要配置主配置文件就行了。例如在我的服务器上是在：&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/nginx.conf&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;指令上下文&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;nginx.conf 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。&lt;/p&gt;

&lt;p&gt;其中每个配置项由配置指令和指令参数构成，形成一个键值对，&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 后面地为注释，理解起来也非常容易。&lt;/p&gt;

&lt;p&gt;一般配置文件的结构和通用配置如下：&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 运行 nginx 的所属组和所有者
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;worker_processes&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 开启一个 nginx 工作进程,一般 CPU 几核就写几
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/run/nginx.pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pid 路径
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;worker_connections&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 一个进程能同时处理 768 个请求
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# multi_accept on;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 与提供 http 服务相关的配置参数，一般默认配置就可以，主要配置在于 http 上下文里的 server 上下文
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Basic Settings
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Logging Settings
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Gzip Settings
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# nginx-naxsi config
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# nginx-passenger config
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Virtual Host Configs
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;##
&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;此处省略通用默认配置&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 此时，在此添加 server 上下文，开始配置一个域名，一个 server 配置段一般对应一个域名
&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# 监听本机所有 ip 上的 80 端口
&lt;/span&gt;                &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 域名：www.example.com 这里 &quot;_&quot; 代表获取匹配所有
&lt;/span&gt;                &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/filename/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 站点根目录
&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# 可有多个 location 用于配置路由地址
&lt;/span&gt;                        &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 邮箱的配置，因为用不到，所以把这个 mail 上下文给注释掉
#mail {
#       # See sample authentication script at:
#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#       
#       # auth_http localhost/auth.php;
#       # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;
#       # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;
#     
#       server {
#               listen      localhost:110;
#               protocol    pop3;
#               proxy       on;
#       }
#
#       server {
#               listen      localhost:143;
#               protocol    imap;
#               proxy       on;
#       }
#}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里需要注意的是 http 上下文里的 server 上下文。&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# 监听本机所有 ip 上的 80 端口
&lt;/span&gt;        &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 域名：www.example.com 这里 &quot;_&quot; 代表获取匹配所有
&lt;/span&gt;        &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/filename/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 站点根目录
&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# 可有多个 location 用于配置路由地址
&lt;/span&gt;            &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的 root 字段最好写在 location 字段的外边，防止出现无法加载 css、js 的情况。因为 css、js 的加载并不是自动的，nginx 无法执行，需要额外的配置来返回资源，所以，对于静态页面的部署，这样做是最为方便的。&lt;/p&gt;

&lt;p&gt;这里对 root 作进一步解释，例如在服务器上有 /home/zhihu/ 目录，其下有 index.html 文件和 css/ 以及 img/ ， &lt;code class=&quot;highlighter-rouge&quot;&gt;root /home/zhihu/;&lt;/code&gt; 就将指定服务器加载资源时是在 /home/zhihu/ 下查找。&lt;/p&gt;

&lt;p&gt;其次， location 后的匹配分多种，其各类匹配方式优先级也各不相同。这里列举一精确匹配例子：&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               
        &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
        &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/zhihu/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    

        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/zhihu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;rewrite&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^/.*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时，访问 www.example.com/zhihu 就会加载 zhihu.html 出来了。由于 location 的精确匹配，只有访问  www.example.com/zhihu 这个路由时才会正确响应，而且此时要通过 rewrite 正则匹配，把 /zhihu 解析替换成原来的 / 。关于更多 location 字段用法，可以在文章最后给出的参考资料中查看。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于使用 nginx 部署静态页面，最简单便捷的配置方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面说了挺多关于配置的说明，下面推荐一种个人认为最为便捷的配置方法。（特此感谢 &lt;a href=&quot;https://github.com/guyskk&quot;&gt;guyskk&lt;/a&gt; 学长的答疑解惑）&lt;/p&gt;

&lt;p&gt;首先创建一个目录，例如： &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/ubuntu/website&lt;/code&gt; 然后在这个 website 文件夹下可以放置你需要部署的静态页面文件，例如 website 下我有 google、zhihu、fenghuang 这三个文件夹，其中 server 字段配置如下：&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/ubuntu/website&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里每个文件夹下面的静态页面文件名都是 index.html ，我以前有个很不好的习惯，比如 zhihu 页面就喜欢命名为 zhihu.html ，但就从前端来看，这也是不符合规范的。&lt;/p&gt;

&lt;p&gt;这样配置的话，例如当你访问 &lt;a href=&quot;http://www.showzeng.cn/google/&quot;&gt;www.showzeng.cn/google/&lt;/a&gt; 时，nginx 就会去 website 目录下的 google 文件夹下寻找到 index.html 并把 google 页面返回，同理，访问 &lt;a href=&quot;http://www.showzeng.cn/zhihu/&quot;&gt;www.showzeng.cn/zhihu/&lt;/a&gt; 时，会寻找到 zhihu 文件夹下的 index.html 并把 zhihu 页面返回。&lt;/p&gt;

&lt;p&gt;而在 zhihu、google 、fenghuang 文件夹的同级目录上，再添加你的域名首页 index.html 时，访问 www.example.com 时就会返回了。&lt;/p&gt;

&lt;p&gt;这里唯一美中不足的是，访问域名中 www.showzeng.cn/zhihu 末尾会自动加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; ，在浏览器中按 F12 调试会发现 www.showzeng.cn/zhihu 为 301 状态码，因为 index.html 是在 zhihu/ 文件夹下，所以在搜索过程中会重定向到 www.showzeng.cn/zhihu/ ，起初我是接受不了的，那一 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 看起来太难受了，但是只要一想到要一个一个 location 字段去匹配，我一下子就接受了。不知道你怎么看，反正我是接受了。&lt;/p&gt;

&lt;h4 id=&quot;nginx--3&quot;&gt;&lt;strong&gt;Nginx 启动运行&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 reload 方法不用重启服务，直接重新加载配置文件，客户端感觉不到服务异常，实现平滑切换。当然你也可以重新启动 nginx 服务。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;nginx--4&quot;&gt;&lt;strong&gt;Nginx 停止运行&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo nginx -s stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/nginx/&quot;&gt;Nginx 入门指南&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://carrot.is/coding/nginx_introduction&quot;&gt;Nginx for Developers: An Introduction&lt;/a&gt; &lt;a href=&quot;https://fraserxu.me/2013/06/22/Nginx-for-developers/&quot;&gt;（译文）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://seanlook.com/2015/05/17/nginx-location-rewrite/&quot;&gt;nginx 配置 location 总结及 rewrite 规则写法&lt;/a&gt;&lt;/p&gt;</content><category term="Nginx" /><summary type="html">你知道怎么在自己的服务器上部署一些简单的静态页面吗？使用 Nginx 可以让你爽到飞起！</summary></entry><entry><title type="html">Gson 解析那些事</title><link href="http://localhost:4000/android/2016/09/11/Something-about-Gson-parsing.html" rel="alternate" type="text/html" title="Gson 解析那些事" /><published>2016-09-11T13:34:39+08:00</published><updated>2016-09-11T13:34:39+08:00</updated><id>http://localhost:4000/android/2016/09/11/Something-about-Gson-parsing</id><content type="html" xml:base="http://localhost:4000/android/2016/09/11/Something-about-Gson-parsing.html">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;文章来源：itsCoder 的 &lt;a href=&quot;https://github.com/itsCoder/weeklyblog&quot;&gt;WeeklyBolg&lt;/a&gt; 项目&lt;/li&gt;
    &lt;li&gt;itsCoder主页：&lt;a href=&quot;http://itscoder.com/&quot;&gt;http://itscoder.com/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;作者：&lt;a href=&quot;https://github.com/showzeng&quot;&gt;showzeng&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;审阅者：&lt;a href=&quot;https://github.com/yongyu0102&quot;&gt;用语&lt;/a&gt;、&lt;a href=&quot;https://github.com/wuchangfeng&quot;&gt;allenwu&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;json-&quot;&gt;JSON 的那些事&lt;/h3&gt;

&lt;h4 id=&quot;json&quot;&gt;什么是 JSON？&lt;/h4&gt;
&lt;p&gt;维基百科对它的定义是：JSON（JavaScript Object Notation）是一种由道格拉斯·克罗克福特构想设计、轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管 JSON 是 Javascript 的一个子集，但 JSON 是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。&lt;a href=&quot;https://zh.wikipedia.org/wiki/JSON&quot;&gt;戳我进入维基百科 JSON 词条&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;刘欣前辈在他的 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;amp;mid=2665513059&amp;amp;idx=1&amp;amp;sn=a2eaf97d9e3000d15a33681d1b720463&amp;amp;scene=21#wechat_redirect&quot;&gt;Javascript: 一个屌丝的逆袭&lt;/a&gt; 一文中就有这么一段话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;后来有个好事之徒把上面的那种处理方式称为 AJAX 即 “Asynchronous Javascript And XML”（异步 JavaScript 和 XML）， 其实异步挺好， 但是 XML 就很不爽了。比如说服务器返回了下面这段 xml ：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;isbn&amp;gt;&lt;/span&gt;978-7-229-03093-3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/isbn&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;三体&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&amp;gt;&lt;/span&gt;刘慈欣&lt;span class=&quot;nt&quot;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;introduction&amp;gt;&lt;/span&gt;中国最牛的科幻书&lt;span class=&quot;nt&quot;&gt;&amp;lt;/introduction&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;price&amp;gt;&lt;/span&gt;38.00&lt;span class=&quot;nt&quot;&gt;&amp;lt;/price&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;真正的数据很少， 标签（像&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;&lt;/code&gt;这样的）反而占了大头， 把数据都给淹没了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;XML 的语义性强，也比较直观，与之相比，JSON 的主要优势在于它的体积更小，在网络上传输时就可以更省流量。可以看出 JSON 也是顺应趋势，为 JavaScript 而生，而今已在数据传输上占据一席之地。&lt;/p&gt;

&lt;p&gt;而现在，RESTful API 也是一种流行趋势。就现在我所在的工作室，后台使用 Python 和 flask 框架，RESTful API。所以项目上正好碰上这样的 JSON 数据处理，便作下此篇。&lt;/p&gt;

&lt;h3 id=&quot;gson-&quot;&gt;Gson 的那些事&lt;/h3&gt;

&lt;h4 id=&quot;gson--1&quot;&gt;1. Gson 的来历&lt;/h4&gt;
&lt;p&gt;Gson（又称 Google Gson）是 Google 公司发布的一个开放源代码的 Java 库，主要用途为序列化 Java 对象为 JSON 字符串，或反序列化 JSON 字符串成 Java 对象。&lt;/p&gt;

&lt;h4 id=&quot;gson--android-studio-&quot;&gt;2. Gson 在 Android Studio 中的引入&lt;/h4&gt;
&lt;p&gt;首先是 Gson 的引入，在 Android Studio 界面按下 Ctrl + Shift + Alt + s 快捷键，调出 Project Structure 界面，选择 Modules 下 app 的 Dependencies 选项，点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 号，选择添加一个 Library dependency 。
&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/weeklyBlog/NO.3/Project-Structure-screen-shot.png&quot; alt=&quot;Project Structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后搜索所需要的第三方库即可，这里我们需要的是 gson，输入 com.google.code.gson:gson 就会看到有相应的结果显示出来了，我们直接添加导入即可。
&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/weeklyBlog/NO.3/Choose-Library-Dependency-screen-shot.png&quot; alt=&quot;Choose Library Dependency&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你也可以使用 build.gradle 或者下载并引入相应的 jar 包，这里就不再赘余了，而且也没有这方法来的快。&lt;/p&gt;

&lt;h4 id=&quot;gson--2&quot;&gt;3. Gson 的使用&lt;/h4&gt;
&lt;p&gt;Gson 的使用非常简单，只需要 new 一个 Gson() 对象即可：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exampleJsonString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;详情参见 &lt;a href=&quot;https://github.com/google/gson/blob/master/UserGuide.md&quot;&gt;Google 官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而反序列化 JSON 数据的重点还是在这里的 Example 实体类(或是常说的 JavaBeans )的书写。&lt;/p&gt;

&lt;h3 id=&quot;javabeans-&quot;&gt;JavaBeans 的那些事&lt;/h3&gt;

&lt;h4 id=&quot;javabeans&quot;&gt;1. 什么是 JavaBeans？&lt;/h4&gt;
&lt;p&gt;维基百科对它的定义是：JavaBeans 是 Java 中一种特殊的类，可以将多个对象封装到一个对象 ( bean ) 中。特点是可序列化，提供无参构造器，提供 getter 方法和 setter 方法访问对象的属性。名称中的 “ Bean ” 是用于 Java 的可重用软件组件的惯用叫法。&lt;a href=&quot;https://zh.wikipedia.org/wiki/JavaBeans&quot;&gt;戳我进入维基百科 JavaBeans 词条&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果看完维基百科的定义你还是觉得难以理解，这里推荐的是知乎上的一个&lt;a href=&quot;https://www.zhihu.com/question/19773379&quot;&gt;杨博前辈的高票解答&lt;/a&gt;，还有就是刘欣前辈写的 &lt;a href=&quot;&quot;&gt;Java 帝国之 Java Bean (上)&lt;/a&gt; 和 &lt;a href=&quot;&quot;&gt;Java 帝国之 Java Bean (下)&lt;/a&gt; 这两篇文章，不得不说刘欣前辈的文章都很风趣易懂，以小见大，有种《明朝那些事》的味道。&lt;/p&gt;

&lt;p&gt;我对 JavaBean 的理解是，Java 为了做到所承诺的向后兼容，于是定义了这么一套规范，JavaBean 里的对象设为私有，将对象的 set 和 get 等方法暴露出来。也就是说这只是一种规范约束。而这种约束也体现了 Java 封装的思想，将对象设为私有变量，使得外部变量不能访问，收紧权限，同时又提供 set 和 get 方法来释放一些权限，使得外部可以间接的对属性值修改从而改变类内部变量的状态，这样的封装，隐藏了具体的实现细节，也降低了耦合性。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;解析的那些事&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;且看这解析三部曲：观、构、干&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;1. 解析第一步：观&lt;/h4&gt;
&lt;p&gt;要解析数据，第一步肯定就是观察数据啦！以下均以实际项目中的数据处理作为事例。在写图书馆功能模块时，调用后台所给的 API ，返回借阅信息的 json 数据如下：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;郑斌编著&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;N1036673&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;12F5319&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黑客攻防入门与进阶&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;周颖等编著&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A3421820&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;757BBDA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;程序员的数学思维修练:趣味解读&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(美) Paul Graham著&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;N1401694&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;63B1A99&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黑客与画家:来自计算机时代的高见&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(美) 萨旺特·辛格著&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A1449697&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AFFA299&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大未来:移动互联时代的十大趋势:implications for our future lives&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;陈根著&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AN1456291&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7A3B7CE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;可穿戴设备:移动互联网新浪潮&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;李维勇主编&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;barCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AN145627&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;borrowDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;E8909E9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;returnDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-09-18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Android UI设计&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在这里的 json 最外面是一个 {} ，里面有 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;，接着 data 里面是一个 [] ，里面包含着 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ {&quot;author&quot;: &quot;something&quot;, &quot;barCode&quot;: &quot;something&quot;, &quot;borrowDate&quot;: &quot;something&quot;, &quot;check&quot;: &quot;something&quot;, &quot;returnDate&quot;: &quot;something&quot;, &quot;title&quot;: &quot;something&quot;}, ***]&lt;/code&gt;，而每一个 {} 里的键名和顺序都是一样的。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2. 解析第二步：构&lt;/h4&gt;
&lt;p&gt;分析完数据，接下来就是要去构造实体类啦！&lt;/p&gt;

&lt;p&gt;其中 {} 所对应的是一个类，[] 所对应的是 List 或者是数组，可以看到最外层是由 data 、message、status 组成，而 data 里面是一个 List 。由此看来，我们可以先写出最外层的实体类：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这就是一个标准的 JavaBean 了，提供默认的无参构造器，私有变量，以及暴露出各对象的 set 和 get 方法。&lt;/p&gt;

&lt;p&gt;再来看 data 里面的数据，可以看出是每本书的信息所对应的键名是相同的，所以可以用同一个实体类表示，我们接着写这个 Data 类。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBarCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;barCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBarCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;barCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBorrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;borrowDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBorrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;borrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setReturnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReturnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你要把这个 Data 类内嵌到刚才的 Root 类里面，必须声明是静态类型，不然是不能解析，示例如下。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//这里省略 set 和 get 方法&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//这里省略 set 和 get 方法&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有一点就是，在返回的 JSON 数据中，如果有不需要的数据，在构造实体类时，是可以不需要写出来的。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;3. 解析第三步：干&lt;/h4&gt;
&lt;p&gt;实体类都写好了，还有什么好说的，就是干。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLibraryInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//此方法为部分代码,且这里省略网络请求部分&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//这里是示例，取出一些数据&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;barCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBarCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;borrowDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBorrowDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numberOfBooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有个点，是在我不懂之前一直疑惑且写了很多无用赘余的代码，就是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Root root = gson.fromJson(responseBody, Root.class);&lt;/code&gt; 这步执行完后，相应的数据其实就已经填充到对应的实体类的变量中，所以直接 get 就可以取到数据啦！那可能有人要问了，这里的 set 方法有什么用，根本就没用上啊。只能说只是你没有碰上那个需求，所以没用上，如果说你的程序里需要在请求回来的数据里设定一些特定的值，此时你就需要用到 set 方法。&lt;/p&gt;

&lt;p&gt;这里取出各个数据（ List 可以遍历取出），之后你需要什么要的格式和组合就凭君调遣啦！我的习惯是将这个图书馆数据查询获取模块写成一个 Util ，应用中需要用到什么样的数据，在 Util 里写一个对应的方法返回即可。&lt;/p&gt;</content><category term="Android" /><category term="Android" /><category term="Gson" /><summary type="html">网络请求常常伴随着数据的处理，而今 JSON 格式比较流行，就来看看 Android 中是如何去解析它的。</summary></entry><entry><title type="html">数据结构之绪论篇</title><link href="http://localhost:4000/c/2016/05/18/data-structure-introduction.html" rel="alternate" type="text/html" title="数据结构之绪论篇" /><published>2016-05-18T14:46:19+08:00</published><updated>2016-05-18T14:46:19+08:00</updated><id>http://localhost:4000/c/2016/05/18/data-structure-introduction</id><content type="html" xml:base="http://localhost:4000/c/2016/05/18/data-structure-introduction.html">&lt;p&gt;&lt;strong&gt;基本概念和术语&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.数据（Data）
数据是信息的载体，是对信息的一种符号表示。它能够被计算机识别、存储和加工处理。&lt;/p&gt;

&lt;p&gt;2.数据元素（Data Element）
数据元素是数据的基本单位。在不同条件下，数据元素又可称为元素、结点、顶点、记录等。&lt;/p&gt;

&lt;p&gt;3.数据对象（Data Object）
数据对象是具有相同性质的数据元素的集合，是数据的一个子集。&lt;/p&gt;

&lt;p&gt;4.数据类型（Data Type）
是一组性质相同的值的集合以及定义在这个值集合上的一组操作的总称。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据结构是相互之间存在一种或多种特定关系的数据元素的集合。其具有以下四种基本类型：&lt;/p&gt;

&lt;p&gt;（1）集合结构。结构中的数据元素之间同属于一个集合。集合是元素关系极为松散的一种结构。&lt;/p&gt;

&lt;p&gt;（2）线性结构。结构中的数据元素之间存在一对一的关系。除了首尾结点，任何一个结点都有一个唯一的前驱和一个唯一的后继。&lt;/p&gt;

&lt;p&gt;（3）树形结构。结构中的数据元素之间存在一对多的关系。除了树根节点，任何一个结点最多有一个前驱，可以有多个后继。是一种典型的非线性结构。&lt;/p&gt;

&lt;p&gt;（4）图形结构。结构中的数据元素之间存在多对多的关系。特征是：任何一个元素可以有多个前驱，也可以有多个后继，是一种多对多的前驱后继关系。也称网状结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg&quot; alt=&quot;四类基本类型&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据结构包括以下三方面内容：数据的逻辑结构、存储结构和数据运算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E5%9B%BE.jpg&quot; alt=&quot;数据结构三方面内容&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;逻辑结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从数据结构的概念可以知道，数据结构有两个要素：一个是数据元素的集合，另一个是关系的集合。在形式上，数据结构可用一个二元组来表示。
数据结构的形式定义为：Data_Structure = (D,R)  其中，D是数据元素（又称结点）的有限集，R是D上关系的有限集。eg：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;D &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;K, R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
K &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1, 2, 3, 4, 5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
R &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;1, 2&amp;gt;, &amp;lt;1, 3&amp;gt;, &amp;lt;3, 4&amp;gt;, &amp;lt;3, 5&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其对应树形逻辑结构图：
&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E4%BE%8B%E5%AD%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E5%9B%BE.jpg&quot; alt=&quot;例树形结构图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;存储结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;! 顺序存储结构。把逻辑上相邻的结点存储在物理上相邻的存储单元里，结点之间的逻辑关系由存储单元位置的邻接关系来体现。通常借助程序语言中的数组来描述。&lt;/p&gt;

&lt;p&gt;优点：占用较少的存储空间。 缺点：只能使用相邻的一整块存储单元，因此可能产生较多的碎片现象。&lt;/p&gt;

&lt;p&gt;! 链式存储结构。不要求逻辑上相邻的结点在物理位置上相邻，将结点所占的存储单元分为两部分，一部分存放结点本身的信息（数据项），另一部分存放该结点的后继结点所对应的存储单元的地址，结点间的逻辑关系由附加的指针字段表示。通常借助程序语言中的指针类型来描述。&lt;/p&gt;

&lt;p&gt;优点：不会出现碎片化现象，充分利用所有的存储单元。 缺点：每个结点占用较多的存储空间。&lt;/p&gt;

&lt;p&gt;! 索引存储方式。用结点的索引号来确定结点的存储地址。通常在存储结点信息的同时，还建立附加的索引表，结点间的逻辑关系由索引项来表示。&lt;/p&gt;

&lt;p&gt;优点：检索速度快。 缺点：增加了附加的索引表，占用较多的存储空间，且在增加和删除数据时由于要修改索引表而花费较多时间。&lt;/p&gt;

&lt;p&gt;! 散列存储方式。根据结点的关键字值直接计算出该结点的存储地址。通过散列函数把结点间的逻辑关系对应到不同的物理空间。&lt;/p&gt;

&lt;p&gt;优点：检索、增加和删除结点的操作都很快。 缺点：当采用不好的散列函数时可能出现结点存储单元的冲突，为解决冲突需要附加时间和空间的开销。&lt;/p&gt;

&lt;p&gt;这四种基本存储方式可单独使用，也可以组合使用，视情况而选取最好的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据的运算&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据的运算无非就是基本的增删查改这些操作，通过算法来实现。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;算法是对问题求解过程的一种描述，是为解决一个或一类问题给出的一个确定的、有限长的操作序列。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E7%AE%97%E6%B3%95%E5%AF%BC%E5%9B%BE.jpg&quot; alt=&quot;算法&quot; /&gt;&lt;/p&gt;

&lt;p&gt;算法具有以下五个特性：&lt;/p&gt;

&lt;p&gt;（1）有穷性。对于任意一组合法的输入值，一个算法必须在执行有穷步之后结束，且每一步都在有穷的时间内完成。&lt;/p&gt;

&lt;p&gt;（2）确定性。组成算法的每一步操作都必须是明确的、无二义性。并且在任何条件下，算法都只有一条执行路径。&lt;/p&gt;

&lt;p&gt;（3）可行性。算法中所有操作都必须是足够基本的。即：序列中的每个操作都是可以简单完成的，都可以通过有限次的已经实现的基本操作运算来实现。&lt;/p&gt;

&lt;p&gt;（4）输入。一个算法有0个或者多个输入。&lt;/p&gt;

&lt;p&gt;（5）输出。一个算法有一个或多个输出。&lt;/p&gt;

&lt;p&gt;算法设计的要求：&lt;/p&gt;

&lt;p&gt;（1）正确性。算法的执行结果应当满足预先规定的功能和性能要求。&lt;/p&gt;

&lt;p&gt;（2）可读性。算法应当思路清晰、层次分明、简单明了、易读易懂，有利有于阅读者对程序的理解。&lt;/p&gt;

&lt;p&gt;（3）健壮性。算法应当具有容错处理。当输入非法数据时，算法应当对其作出反应并进行适当的处理，不至引起严重后果。&lt;/p&gt;

&lt;p&gt;（4）高效性和存储量需求。效率指算法执行的时间。存储量需求指算法执行过程中所需要的最大存储空间。通常这二者是矛盾不可兼得的。&lt;/p&gt;

&lt;p&gt;算法效率的度量分为：时间复杂度和空间复杂度，时间复杂度指算法运行从开始到结束所需的时间，空间复杂度指算法运行开始到结束所需的存储量（包括输入数据所占空间、程序本身所占空间、辅助变量所占空间）。&lt;/p&gt;</content><category term="C" /><category term="数据结构" /><category term="C语言" /><summary type="html">数据结构是一门研究非数值计算的程序设计问题中计算机的操作对象以及它们之间的关系和操作的学科。主要研究数据的逻辑结构、数据在计算机中的组织方式（存储结构）以及对数据进行的各种非数值运算的方法和算法。因此，数据结构主要有3个方面：数据的逻辑结构、数据的存储结构、数据的算法。</summary></entry><entry><title type="html">Android六种核心安全机制</title><link href="http://localhost:4000/android/2016/05/14/android-security.html" rel="alternate" type="text/html" title="Android六种核心安全机制" /><published>2016-05-14T20:00:36+08:00</published><updated>2016-05-14T20:00:36+08:00</updated><id>http://localhost:4000/android/2016/05/14/android-security</id><content type="html" xml:base="http://localhost:4000/android/2016/05/14/android-security.html">&lt;blockquote&gt;
  &lt;p&gt;本文为极客学院“x跨国公”讲师的教学视频观后总结，以便交流分享！（ps：wiki那些东西，看到那些算法的时候真的头大啊！我只能瞻仰瞻仰了）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;android&quot;&gt;&lt;strong&gt;Android安全概述&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;在典型场景中，安全主要用于解决4类需求：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;保密（security/confidentiality）&lt;/li&gt;
  &lt;li&gt;鉴别/认证（authentication）&lt;/li&gt;
  &lt;li&gt;完整性（integrity）&lt;/li&gt;
  &lt;li&gt;不可否认性（non-repudiation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些需求都是很容易理解的。网络是公开的，现实生活中你可以约到荒山野岭来说出你的隐私的信息，但网络无法做到物理上的隔绝。network is public！这就需要对你的信息进行加密了。&lt;/p&gt;

&lt;p&gt;安全领域的潜规则：一个好的密码术是算法公开（经历安全的检验，专家的论证，及黑客若干年的尝试仍未破解）而密钥保密。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;&lt;strong&gt;对称加密&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;首先来看看这些名字的定义&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密钥：分加密密钥，解密密钥&lt;/li&gt;
  &lt;li&gt;明文：没有进行加密，能够直接代表原文含义的信息&lt;/li&gt;
  &lt;li&gt;密文：经过加密处理之后，隐藏原文含义的信息&lt;/li&gt;
  &lt;li&gt;加密：将明文转换成密文的实施过程&lt;/li&gt;
  &lt;li&gt;解密：将密文转换成明文的实施过程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png&quot; alt=&quot;对称加密&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;置换加密、转置加密、乘积加密&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;置换变换&lt;/h3&gt;

&lt;p&gt;顺序不改变，每一个字母（字符/数据）用其他字母（字符/数据）去替换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E7%BD%AE%E6%8D%A2%E5%8F%98%E6%8D%A2.png&quot; alt=&quot;置换变换&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;转置变换&lt;/h3&gt;

&lt;p&gt;原始信息不变，顺序变换。类似于线性代数里矩阵的转置，将m行n列转换成n行m列，但行列顺序由key决定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E8%BD%AC%E7%BD%AE%E5%8F%98%E6%8D%A2.png&quot; alt=&quot;转置变换&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;乘积变换&lt;/h3&gt;

&lt;p&gt;例如，将上面信息先进行置换变换再进行转置变换。&lt;/p&gt;

&lt;p&gt;以下可以通俗的认为就是置换加密和转置加密迭代的一个应用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DES（Data Encryption Standard : 数据加密标准）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但这并不是一个一个字符的变换，而是一个一个块（block），64bit（8个byte）为一个基本加密单元，即：块长度为64位，19道加密工序。&lt;/p&gt;

&lt;p&gt;它是一种对称密钥加密块密码算法，但DES现已经不是一种安全的加密方法，主要是因为它使用的56位密钥过短。1999年1月，distributed.net与电子前哨基金会合作，在22小时15分钟内即公开破解了一个DES密钥。在2001年，DES作为一个标准已经被高级加密标准（AES）所替换。另外，DES已经不再作为国家标准科技协会（前国家标准局）的一个标准。&lt;/p&gt;

&lt;p&gt;这里密钥表面上是64位，然而只有其中的56位被实际用于算法，其余8位可以被用于奇偶校验，并在算法中被丢弃，因此，DES的有效密钥长度为56位，通常称DES的密钥长度为56位。&lt;/p&gt;

&lt;p&gt;关于DES更多详细信息，参见&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96&quot;&gt;wiki百科 - DES&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AES（Advanced Encryption Standard : 高级加密标准）：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一并沿用至今。&lt;/p&gt;

&lt;p&gt;严格地说，AES和Rijndael加密法并不完全一样（虽然在实际应用中两者可以互换），因为Rijndael加密法可以支持更大范围的区块和密钥长度：AES的区块长度固定为128 比特，密钥长度则可以是128，192或256比特；而Rijndael使用的密钥和区块长度可以是32位的整数倍，以128位为下限，256比特为上限。加密过程中使用的密钥是由Rijndael密钥生成方案产生。&lt;/p&gt;

&lt;p&gt;关于AES更多详细信息，参见&lt;a href=&quot;https://zh.wikipedia.org/zh/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86&quot;&gt;wiki百科 - AES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里引出一个问题：对称加密的密钥用什么方式交换呢，明文？肯定是容易被截获的。再用对称加密？那加密密钥的密钥又用什么方式交换呢？这就陷入了死循环，别急，接下来我们就来说说非对称加密。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png&quot; alt=&quot;非对称加密&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里加密密钥为公钥（public key），解密密钥为私钥（private key）。这对密钥由同一个人产生。将公钥公开，私钥自己保管。&lt;/p&gt;

&lt;p&gt;公钥算法的理论基石：（数学是科学之基）建立在分解大数的困难度；建立在以大素数为模来计算离散对数的困难度。太过高深，这里不讨论，我也讨论不来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RSA加密算法（一种非对称加密算法）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。&lt;/p&gt;

&lt;p&gt;对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破（公钥/私钥长度至少1024bit）。到2016年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。&lt;/p&gt;

&lt;p&gt;具体实现细节可参见wiki百科：&lt;a href=&quot;https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95&quot;&gt;RSA加密算法&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;&lt;strong&gt;密钥交换&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;对称加密优缺点：&lt;/p&gt;

&lt;p&gt;优点：高效；缺点：密钥交换问题，不如RSA的加密安全程度高，但当选择256bit的AES，仍能胜任绝大多数的安全领域。&lt;/p&gt;

&lt;p&gt;非对称加密优缺点：&lt;/p&gt;

&lt;p&gt;优点：安全性足够高，没有密钥交换问题；缺点：效率低，对于大数据加密很慢。&lt;/p&gt;

&lt;p&gt;融合优缺点：&lt;/p&gt;

&lt;p&gt;实际的保密会话应用场景：基于高效的对称加密算法对会话进行加密，会话密钥实时产生且周期性变化，基于其他足够安全的方式进行会话密钥的传输和交换。&lt;/p&gt;

&lt;p&gt;即：会话用AES  256bit的shared key进行加密，会话密钥产生实时周期变化并由RSA非对称加密进行交换。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Diffie - Hellman密钥交换协议&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基于以大素数为模计算离散对数困难度,双方各自选定key，然后以一定算法变换后传输给对方,双方利用对方交换来的数据和自己选定的key做变换，获得一个一致的结果，作为会话密钥。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/Diffie%20Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE.png&quot; alt=&quot;Diffie - Hellman密钥交换协议&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;总结：基于对称加密的高效性，会话多用对称加密进行交换，但其shared key存在交换问题，此处用非对称加密或其他交换协议进行交换。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-7&quot;&gt;&lt;strong&gt;消息摘要&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;hash&quot;&gt;HASH与散列函数的定义与特点：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;HASH（散列）函数（算法）的定义：变长的输入变换成定长的输出。&lt;/li&gt;
  &lt;li&gt;常见HASH算法：MD5（128bit）、SHA1（160bit）&lt;/li&gt;
  &lt;li&gt;HASH的特点：
    &lt;ul&gt;
      &lt;li&gt;易变形：即便原始信息发生1bit的变化，HASH的输出将会有不可预知的巨大变化。&lt;/li&gt;
      &lt;li&gt;不可逆：通过HASH结果构造出满足的输入信息是不可能的或者极其困难。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-8&quot;&gt;消息摘要和数字指纹：&lt;/h4&gt;

&lt;p&gt;HASH与指纹的特点类似，数字指纹由此而来。消息摘要的名字很多：HASH、哈希、散列、MD、消息摘要、数字指纹。&lt;/p&gt;

&lt;h4 id=&quot;hash-1&quot;&gt;HASH的应用场景：&lt;/h4&gt;

&lt;p&gt;1.防篡改：基于易变形特性，以保证完整性。&lt;/p&gt;

&lt;p&gt;eg：下载文件时的MD5值（判断是否被篡改或缺失，像迅雷这些下载工具，在下载完成后都会自动的与提供的MD5值进行比对判断）、消息传送时尾部额外传MD。&lt;/p&gt;

&lt;p&gt;2.防损坏：与篡改的性质其实是一样的，但这里指非恶意的篡改，所以拿出来讨论。&lt;/p&gt;

&lt;p&gt;eg：CRC（32位）校验；MD检验消息恶劣环境传输的完整性和未受损坏；应用程序中对于核心文件/数据库读写的鲁棒性保护，防止掉电和Crash（比如loading到一半时突然掉电或crash，这是文件是损坏不完整的，所以，每次加载完成后都会对HASH进行一次更新，以便进行比对，发现不完整就可进行初始化重新载入）。&lt;/p&gt;

&lt;p&gt;3.认证：基于不可逆性，可以认证对端。&lt;/p&gt;

&lt;p&gt;eg：HTTP的Digest认证；ppp的CHAP认证；手机登录密码和隐藏MMI的设计（利用HASH避免密码认证过程中的明文传输）。&lt;/p&gt;

&lt;h3 id=&quot;hash12hashhashhash&quot;&gt;HASH应用时遇到的问题：1.在消息尾附带消息摘要（可以篡改内容的同时篡改摘要）2.密码的HASH认证，尽管猜不到你的密码，但可以截获你的HASH，利用这个HASH不断的进行重放攻击。&lt;/h3&gt;
&lt;p&gt;由此引入了HMAC : Hash - based Message Authentication Code（哈希运算消息认证码）HMAC利用key对原始消息变换后再进行HASH。关于HMAC算法，可参见：&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;wiki百科 - HMAC&lt;/a&gt;；重放攻击，可参见&lt;a href=&quot;http://baike.baidu.com/view/1569933.htm&quot;&gt;百度百科 - 重放攻击&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;&lt;strong&gt;电子签名&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;解决的问题：签名的内容的完整性保护、签名人的不可否认性&lt;/p&gt;

&lt;p&gt;公钥密码术的两面性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在非对称加密中我们知道了利用发布出去的公钥进行信息交流，用自己的私钥进行解密，这是公钥密码术的一面。典型的用于加密。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是，将其倒置使用，用私钥进行加密（签名人身份的唯一性），发布出去后用公钥进行解密，此典型的应用于电子签名场景，但并非所有公钥密码术都支持，RSA支持。即：RSA和公钥密码术成就了电子签名。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是，你想象一下，如果你有几个G的小电影要发送给你的基友，你需要对这几个G的小电影进行签名，而RSA是十分的低效（前面讲到过），所以导致不适合于直接对原始信息进行签名。一般的，会先利用HASH先完成消息摘要的完整性鉴别的作用，而后对消息摘要进行基于公钥密码术的签名，签名一般附着于原始消息尾部或头部一起发送。这里总结一下，你接收到消息后，用他的公钥对签名进行解密，如果发现解不开，说明不是你的基友发的，如果解开后，取出MD5值，用原始消息进行HASH与其MD5值进行比对，然后发现了不同，完蛋，被篡改了。这就perfect了吧！&lt;/p&gt;

&lt;h2 id=&quot;pki&quot;&gt;&lt;strong&gt;证书与PKI&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;证书的作用：（现代信任基石）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;公钥的存储和交换：公钥作为一个字段存储于数字证书中，证书的交换和传输即可传输/交换公钥&lt;/p&gt;

&lt;p&gt;利用签名来保护数字证书本身&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E8%AF%81%E4%B9%A6.png&quot; alt=&quot;证书&quot; /&gt;&lt;/p&gt;

&lt;p&gt;数字时代的信任关系：一个受信任者的证书列表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E5%8F%97%E4%BF%A1%E4%BB%BB.png&quot; alt=&quot;信任列表&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;证书链和PKI：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;数字时代的信任链：证书链&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E8%AF%81%E4%B9%A6%E9%93%BE.png&quot; alt=&quot;证书链&quot; /&gt;&lt;/p&gt;

&lt;p&gt;未受信任的发布者由证书链回溯，逐级验证，找到在受信任列表的发布者，即可信任。&lt;/p&gt;

&lt;p&gt;证书签名的不同点：根证书自签名，非根证书父签名&lt;/p&gt;

&lt;p&gt;证书的限制：约束、用途、有效期&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E5%9F%BA%E6%9C%AC%E7%BA%A6%E6%9D%9F.png&quot; alt=&quot;约束&quot; /&gt;
&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E5%AF%86%E9%92%A5%E7%94%A8%E6%B3%95.png&quot; alt=&quot;用途&quot; /&gt;
&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E6%9C%89%E6%95%88%E6%9C%9F.png&quot; alt=&quot;有效期&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PKI的概念：（Public Key Infrastructure : 公钥基础设施）定义为支持公开密钥管理并能支持认证、加密、完整性和可追究性服务的基础设施。更多信息参见&lt;a href=&quot;http://baike.baidu.com/item/PKI&quot;&gt;百度百科 - PKI&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于证书的认证：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于可信任证书的认证方式被广泛应用在现代安全领域，比如：wifi、https&lt;/p&gt;

&lt;p&gt;在https中，典型的client对server的认证和鉴别基于可信任列表&lt;/p&gt;</content><category term="Android" /><category term="Android" /><category term="安全机制" /><summary type="html">深入理解安全机制，Android的六种核心安全机制：加密、密钥、签名与证书。本文为安全机制背景的介绍，以及由需求到技术的革新。</summary></entry><entry><title type="html">数据结构之前言</title><link href="http://localhost:4000/c/2016/05/10/data-structure-preface.html" rel="alternate" type="text/html" title="数据结构之前言" /><published>2016-05-10T23:01:37+08:00</published><updated>2016-05-10T23:01:37+08:00</updated><id>http://localhost:4000/c/2016/05/10/data-structure-preface</id><content type="html" xml:base="http://localhost:4000/c/2016/05/10/data-structure-preface.html">&lt;blockquote&gt;
  &lt;p&gt;计算机内存分配&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先要清楚的是，在计算机中，并不存在内容的删除，只有内容的覆盖，这也是为什么会有数据恢复这种技术了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/data.png&quot; alt=&quot;空闲区与占用区&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如说你在word里编辑你的文件，假如你输入了三个字符，你删除之后，你认为就安全了吗？别人不可能恢复了吗？这样做还是不能销毁你的记录，只有通过更大的内容去覆盖你之前的内容，这样，之前的内容才会被“销毁”。尼玛，真有趣！&lt;/p&gt;

&lt;p&gt;值得注意的是，在空闲区也是可能有原始数据的。&lt;/p&gt;

&lt;p&gt;在c里 , &amp;amp;表示取地址 , *表示取内容&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里的*与取内容区分一下，这里是申明p为地址变量，用来存放地址
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//那么这里的q就是存放地址变量的地址
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里将x的地址传给了p这个地址变量，如果此时输出p，将是一个x的地址
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里将p这个地址变量的地址传给了q这个地址变量，如果此时输出q，将是一个p的地址
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么&lt;em&gt;p = x   ，   *q = p  ，    *(&lt;/em&gt;q) = x = 2&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;指针的风险——悬挂式指针&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为什么说使用指针是要谨慎，因为一不小心就可能造成系统的崩溃，让我们来看看是怎么回事。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这个程序，利用了一个中间变量实现了a,b的数据交换，看似是没有问题的，好像我也是经常这样干！
但是，在内存的分配里我们讲到了空闲区也有可能是有它原本的数据存在的。这里我们假设一下，如果申请的指针变量t原本就是有数据假设为1000，那么我们将a=1暂存到t指针所指向的地址空间，即地址为1000的这个空间，如果说恰好地址为1000的空间又是存放系统文件的，那么不可避免的造成bug、死机甚至是系统的崩溃。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;数组存取&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一个整型占两个字节，这里系统会为这个数组申请18个字节的空间：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png&quot; alt=&quot;数组存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而a就是首地址，即：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里隐含的地址+4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtt0k.com1.z0.glb.clouddn.com/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png&quot; alt=&quot;二维数组存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除b[?][?]表示是具体的数值外，其它表示全为地址&lt;/p&gt;

&lt;p&gt;eg：  b+1为b[1]的地址————行地址
b[0]+1为b[0][1]的地址————列地址&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//列地址
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//行地址，这里q+1将会跳5个数据，q相当于b
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//数组指针
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="C" /><category term="数据结构" /><category term="C语言" /><summary type="html">在开始数据结构之前，先来看看一些小的知识预热一下。主要是计算机内存的分配，指针的风险，以及数组的存储分配。</summary></entry><entry><title type="html">Why Blog?</title><link href="http://localhost:4000/essay/0016/05/05/why-blog.html" rel="alternate" type="text/html" title="Why Blog?" /><published>0016-05-05T19:51:06+08:05</published><updated>0016-05-05T19:51:06+08:05</updated><id>http://localhost:4000/essay/0016/05/05/why-blog</id><content type="html" xml:base="http://localhost:4000/essay/0016/05/05/why-blog.html">&lt;h3 id=&quot;section&quot;&gt;为什么写博客&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.problogger.net/7-reasons-why-personal-blogs-rock/&quot;&gt;7 Reasons Why Personal Blogs Rock&lt;/a&gt;   - -by Darren Rowse&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;teach you the skills of blogging&lt;/li&gt;
    &lt;li&gt;familiarize you with the tools of blogging&lt;/li&gt;
    &lt;li&gt;help you work out how much time you have&lt;/li&gt;
    &lt;li&gt;help you work out if you can sustain blogging for the long term&lt;/li&gt;
    &lt;li&gt;give you a taste of blogging ‘culture’&lt;/li&gt;
    &lt;li&gt;help you define a niche&lt;/li&gt;
    &lt;li&gt;help you find a readership&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;</content><category term="Essay" /><category term="essay" /><category term="test" /><category term="test2" /><summary type="html">Go busy living, or go busy dying!</summary></entry></feed>
